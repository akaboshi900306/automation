import string
import re


contractions_dict = { 
"ain't": "am not",
"aren't": "are not",
"cant":"cannot",
"can't": "cannot",
"can't've": "cannot have",
"'cause": "because",
"cuz": "because",
"could've": "could have",
"couldn't": "could not",
"couldnt":"could not",
"couldn't've": "could not have",
"didn't": "did not",
"doesn't": "does not",
"doesnt":"does not",
"don't": "do not",
"dont":"do not",
"hadn't": "had not",
"hadn't've": "had not have",
"hasn't": "has not",
"haven't": "have not",
"he'd": "he would",
"he'd've": "he would have",
"he'll": "he will",
"he'll've": "he will have",
"he's": "he is",
"how'd": "how did",
"how'd'y": "how do you",
"how'll": "how will",
"how's": "how is",
"i'd": "i would",
"i'd've": "i would have",
"i'll": "i will",
"i'll've": "i will have",
"i'm": "i am",
"im": "i am",
"i've": "i have",
"ive":"i have",
"isn't": "is not",
"it'd": "it would",
"it'd've": "it would have",
"it'll": "it will",
"it'll've": "it will have",
"it's": "it is",
"let's": "let us",
"ma'am": "madam",
"mayn't": "may not",
"might've": "might have",
"mightn't": "might not",
"mightn't've": "might not have",
"must've": "must have",
"mustn't": "must not",
"mustn't've": "must not have",
"needn't": "need not",
"needn't've": "need not have",
"o'clock": "of the clock",
"oughtn't": "ought not",
"oughtn't've": "ought not have",
"shan't": "shall not",
"sha'n't": "shall not",
"shan't've": "shall not have",
"she'd": "she would",
"she'd've": "she would have",
"she'll": "she will",
"she'll've": "she will have",
"she's": "she is",
"should've": "should have",
"shouldn't": "should not",
"shouldn't've": "should not have",
"so've": "so have",
"so's": "so is",
"that'd": "that had",
"that'd've": "that would have",
"that's": "that is",
"there'd": "there would",
"there'd've": "there would have",
"there's": "there is",
"they'd": "they would",
"they'd've": "they would have",
"they'll": "they will",
"they'll've": "they will have",
"they're": "they are",
"they've": "they have",
"to've": "to have",
"wasn't": "was not",
"we'd": "we would",
"we'd've": "we would have",
"we'll": "we will",
"we'll've": "we will have",
"we're": "we are",
"we've": "we have",
"weren't": "were not",
"what'll": "what will",
"what'll've": "what will have",
"what're": "what are",
"what's": "what is",
"what've": "what have",
"when's": "when is",
"when've": "when have",
"where'd": "where did",
"where's": "where is",
"where've": "where have",
"who'll": "who will",
"who'll've": "who will have",
"who's": "who is",
"who've": "who have",
"why's": "why is",
"why've": "why have",
"will've": "will have",
"won't": "will not",
"won't've": "will not have",
"would've": "would have",
"wouldn't": "would not",
"wouldn't've": "would not have",
"y'all": "you all",
"ya'll": "you all",
"y'all'd": "you all would",
"y'all'd've": "you all would have",
"y'all're": "you all are",
"y'all've": "you all have",
"you'd": "you would",
"you'd've": "you would have",
"you'll": "you will",
"you'll've": "you will have",
"you're": "you are",
"you've": "you have",
"ain’t": "am not",
"ain't": "am not",
"aren’t": "are not",
"aren't": "are not",
"cant": "cannot",
"can’t": "cannot",
"can't":"cannot",
"can’t’ve": "cannot have",
"’cause": "because",
"could’ve": "could have",
"couldn’t": "could not",
"couldn’t’ve": "could not have",
"didn’t": "did not",
"doesn’t": "does not",
"don’t": "do not",
"hadn’t": "had not",
"hadn’t’ve": "had not have",
"hasn’t": "has not",
"haven’t": "have not",
"he’d": "he would",
"he’d’ve": "he would have",
"he’ll": "he will",
"he’ll’ve": "he will have",
"he’s": "he is",
"how’d": "how did",
"how’d’y": "how do you",
"how’ll": "how will",
"how’s": "how is",
"i’d": "i would",
"i’d’ve": "i would have",
"i’ll": "i will",
"i’ll’ve": "i will have",
"i’m": "i am",
"im": "i am",
"i’ve": "i have",
"isn’t": "is not",
"it’d": "it would",
"it’d’ve": "it would have",
"it’ll": "it will",
"it’ll’ve": "it will have",
"it’s": "it is",
"let’s": "let us",
"ma’am": "madam",
"mayn’t": "may not",
"might’ve": "might have",
"mightn’t": "might not",
"mightn’t’ve": "might not have",
"must’ve": "must have",
"mustn’t": "must not",
"mustn’t’ve": "must not have",
"needn’t": "need not",
"needn’t’ve": "need not have",
"o’clock": "of the clock",
"oughtn’t": "ought not",
"oughtn’t’ve": "ought not have",
"shan’t": "shall not",
"sha’n’t": "shall not",
"shan’t’ve": "shall not have",
"she’d": "she would",
"she’d’ve": "she would have",
"she’ll": "she will",
"she’ll’ve": "she will have",
"she’s": "she is",
"should’ve": "should have",
"shouldn’t": "should not",
"shouldn’t’ve": "should not have",
"so’ve": "so have",
"so’s": "so is",
"that’d": "that had",
"that’d’ve": "that would have",
"that’s": "that is",
"there’d": "there would",
"there’d’ve": "there would have",
"there’s": "there is",
"they’d": "they would",
"they’d’ve": "they would have",
"they’ll": "they will",
"they’ll’ve": "they will have",
"they’re": "they are",
"they’ve": "they have",
"to’ve": "to have",
"wasn’t": "was not",
"we’d": "we would",
"we’d’ve": "we would have",
"we’ll": "we will",
"we’ll’ve": "we will have",
"we’re": "we are",
"we’ve": "we have",
"weren’t": "were not",
"what’ll": "what will",
"what’ll’ve": "what will have",
"what’re": "what are",
"what’s": "what is",
"what’ve": "what have",
"when’s": "when is",
"when’ve": "when have",
"where’d": "where did",
"where’s": "where is",
"where’ve": "where have",
"who’ll": "who will",
"who’ll’ve": "who will have",
"who’s": "who is",
"who’ve": "who have",
"why’s": "why is",
"why’ve": "why have",
"will’ve": "will have",
"won’t": "will not",
"won’t’ve": "will not have",
"would’ve": "would have",
"wouldn’t": "would not",
"wouldn't": "would not",
"wouldn’t’ve": "would not have",
"wouldn't've": "would not have",
"y’all": "you all",
"y'all": "you all",
"ya’ll": "you all",
"ya'll": "you all",
"y’all’d": "you all would",
"y'all'd": "you all would",
"y’all’d’ve": "you all would have",
"y'all'd've": "you all would have",
"y’all’re": "you all are",
"y'all're": "you all are",
"y’all’ve": "you all have",
"y'all've": "you all have",
"you’d": "you would",
"you'd": "you would",
"you’d’ve": "you would have",
"you'd've": "you would have",
"you’ll": "you will",
"you'll": "you will",
"you’ll’ve": "you will have",
"you'll've": "you will have",
"you’re": "you are",
"you're": "you are",
"you’ve": "you have",
"you've": "you have",

"1st":"first",  ## standadize
"2nd":"second",
"3rd":"third",
"4th":"forth",
"5th":"fifth"
}

## junk phrases list
phraseList = ['[This review was collected as part of a promotion.]','(This review was collected as part of a promotion.)',
            'Rating provided by a verified purchaser','Star Review','star review','home depot','Home Depot','side by side']

## stopword list - Need to make dynamic based on product description, manufacturer, other IDM attributes
stopList = ['family','wife','husband','son','daughter','brother','sister','nephew','niece','uncle','aunt','mother','mom','dad','father','someone','anyone','kid',
            'who','people','follow','person',
            'you','yo',
            'new','my','products','lots','lot',
            'everything','anything','things','thing',
            'kitchen','bedroom','bathroom','tons','one','appliances','plenty',
            'what','home','house','way','items','needs','reviews','review',
            'fridge','refrigerator','frig','purchaser','purchase','100%',
            '0','1','2','3','4','5','6','7','8','9',
            'one','two','three','four','five',
            'product','weeks','week','months','month','days','day','units','years','year',
            'unit','nest','or','ability','able','side','job','time','end','top',
            'couple','something','addition','help','company','fact','get','while','review',
            
            # 'Bosch','bosch','frigidaire','ge','kitchenaid','lg','maytag','LG','lg','lG'
            # 'samsung','whirlpool', 
            'brand',
            'need',
            'model','money','problem','issue',
            
            'vegetable','cheese','food','fruit','meat','milk','snack','butter',

            'see','say','tell','go','hear','come',
            'expectation',
            'right',
            'difference',
            'awesomeness'
    
           ]

## manual standardization dictionary for things possibly not covered in the semantic merging layer
# needs to be combined with terms in post processing 
# will likley need master list + some category specific lists 
standardList = {'apps': 'app',
                 'assemble': 'assembly',
                 'battery': 'battery Life',
                 'bowl': 'dishes',
                 'button': 'buttons',
                 'cheap': 'price',
                 'cheaper': 'price',
                 'clean': 'clean up',
                 'cleaning': 'clean up',
                 'cleanup': 'clean up',
                 'control': 'controls',
                 'costly': 'price',
                 'cycle': 'cycles',
                 'door bell': 'doorbell',
                 'economical': 'price',
                 'expensive': 'price',
                 'worth':'price',
                 'feature': 'features',
                 'features settings': 'features',
                 'heavy': 'weight',
                 'hook up': 'installation',
                 'ice': 'ice maker',
                 'inexpensive': 'price',
                 'install': 'installation',
                 'keurig': 'keurig feature',
                 'look': 'design',
                 'mount': 'installation',
                 'move': 'transport',
                 'open': 'unpacking',
                 'operate': 'operation',
                 'plate': 'dishes',
                 'quiet':'noise',
                 'remove': 'removal',
                 'read':'readability',
                 'set up': 'installation',
                 'setup': 'installation',
                 'shipping': 'delivery',
                 'style design': 'design',
                 'stylish': 'design',
                 'temp': 'temperature',
                 'unpack': 'unpacking',
                 'use': 'usability',
                 'work': 'functionality',
                 'wrinkle control': 'wrinkles'

               }
adj_stoplist = ['amazing',
                 'anxious',
                 'awesome',
                 'awful',
                 'better',
                 'careful',
                 'decent',
                 'different',
                 'disappointed',
                 'early',
                 'enough',
                 'excellent',
                 'excited',
                 'few',
                 'fine',
                 'forward',
                 'frustrated',
                 'further',
                 'glad',
                 'good',
                 'great',
                 'happier',
                 'happy',
                 'important',
                 'impressed',
                 'impressive',
                 'interesting',
                 'last',
                 'nice',
                 'normal',
                 'old',
                 'ok',
                 'okay',
                 'overall',
                 'pleased',
                 'previous',
                 'perfect',
                 'satisfied',
                 'first',
                 'second',
                 'secondary',
                 'several',
                 'sorry',
                 'successful',
                 'terrific',
                 'thankful',
                 'tired',
                 'wise',
                 'wonderful',
                 'worse',
                 'worried',
                 'upset'

                ]
# brandList = ['bosch','frigidaire','ge','kitchenaid','lg','maytag','LG','lg','lG'
#             'samsung','whirlpool'
#             ]

def formalize_str(s):
    s = remove_non_ascii(s)
    ss = s
    s = ''
    for i in ss.split():
        if i.lower() in contractions_dict:
            s = s+' '+contractions_dict[i.lower()]
        else:
            s = s+' '+i
    
    s = s.encode().decode("utf-8")
    return s.strip()

def remove_non_ascii(text): ## remove non ASCII chars from string
    printable = set(string.printable)
    return ''.join(filter(lambda x: x in printable, text))

def replace_URL(text): ## regex to remove URLs from strings
    return re.sub('https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+','URLLINK',text)

def filter_stop_sentences(text): ## quick function to remove unwanted phrases in reviews
    for phrase in phraseList:
        text = text.replace(phrase,' ')
    return text

# def correct_spelling(x, spell = SPELL):
#     tmp = spell(x)
#     return(tmp)

def nlp_clean_pipe(text): ## general cleaning pipeline
    ## maybe add spelling correction
    
    text = formalize_str(text)
    text = replace_URL(text)
    text = filter_stop_sentences(text)
    text = text.replace('set up','setup') # should be handled in a dict like contractions
    text = text.replace('put together','assemble') # should be handled in a dict like contractions
#     text = correct_spelling(text)
    
    return(text)
